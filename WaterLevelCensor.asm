;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Fri Sep 4 2020
; Processor: 80C51
; Compiler:  ASEM-51 (Proteus)
;====================================================================

$NOMOD51
$INCLUDE (8051.MCU)
;====================================================================
; DEFINITIONS
;====================================================================

;====================================================================
; VARIABLES
;====================================================================

;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================
SENSOR1 BIT P1.0
SENSOR2 BIT P1.1
SENSOR3 BIT P1.2
SENSOR4 BIT P1.3
LAMP        BIT P2.0
MOTOR     BIT P2.4
RS	BIT	       P2.5
RW 	BIT          P2.6
EN 	BIT 	       P2.7
LCD_DATA_PORT EQU P0

ORG 0H


CLR LAMP
SETB MOTOR
;====================================================================
; LCD INTERFACING PORT IN 8 BIT MODE
;====================================================================
LCD_INIT:
   
	       MOV DPTR, #CMD 
	       
LOOP_INIT:
	       MOVC A,@A+DPTR
	       JZ NEXT 
	       ACALL LCD_WRITE_CMD 
	       ACALL DELAY_LCD 
	       CLR A 
	       INC DPTR 
	       SJMP LOOP_INIT

;====================================================================
;		SET CURSOR AND WRITE DATA TO LCD
;====================================================================
NEXT: 
	       SETB SENSOR1 
	       SETB SENSOR2
	       SETB SENSOR3
	       SETB SENSOR4
	       
;====================================================================
;		                                      LEVEL 1
;====================================================================	       
IDLE:     	JB SENSOR1, IDLE
		CLR A 
		MOV A, #80H
	        ACALL LCD_WRITE_CMD
		ACALL DELAY_LCD
	        CLR A
	        MOV DPTR, #LVL1
LOOP_NEXT:	MOVC A,@A+DPTR
	       JZ IDLE2
	       ACALL LCD_WRITE_DATA
	       ACALL DELAY_LCD
	       CLR A
	       INC DPTR
	       SJMP LOOP_NEXT

	       
;====================================================================
;		                                      LEVEL 2
;====================================================================
	       
IDLE2:     	JB SENSOR2, IDLE2
		 CLR A 
		MOV A, #80H
	        ACALL LCD_WRITE_CMD
		ACALL DELAY_LCD
	        CLR A
	        MOV DPTR, #LVL2
LOOP_NEXT2:	MOVC A,@A+DPTR
	       JZ IDLE3
	       ACALL LCD_WRITE_DATA
	       ACALL DELAY_LCD
	       CLR A
	       INC DPTR
	       SJMP LOOP_NEXT2

;====================================================================
;		                                      LEVEL 3
;====================================================================	       
IDLE3:     	JB SENSOR3, IDLE3
	        CLR A 
		MOV A, #80H
	        ACALL LCD_WRITE_CMD
		ACALL DELAY_LCD
	        CLR A
	        MOV DPTR, #LVL3
LOOP_NEXT3:	MOVC A,@A+DPTR
	       JZ IDLE4
	       ACALL LCD_WRITE_DATA
	       ACALL DELAY_LCD
	       CLR A
	       INC DPTR
	       SJMP LOOP_NEXT3

;====================================================================
;		                                      LEVEL 4
;====================================================================	       
IDLE4:     	JB SENSOR4, IDLE4
		SETB LAMP
		CLR A 
		MOV A, #80H
	        ACALL LCD_WRITE_CMD
		ACALL DELAY_LCD
	        CLR A
	        MOV DPTR, #LVL4
LOOP_NEXT4:	MOVC A,@A+DPTR
	       ACALL DELAY_LCD
	       ACALL DELAY_LCD
	       ACALL DELAY_LCD
	       ACALL DELAY_LCD
	       ACALL DELAY_LCD
	       ACALL DELAY_LCD
	       JZ NEXT2
	       ACALL LCD_WRITE_DATA
	       ACALL DELAY_LCD
	       CLR A
	       INC DPTR
	       SJMP LOOP_NEXT4

	
;====================================================================
;		IF WATER ALREADY REACH LEVEL 4 COUNT DOWN 10 SECONDS
;====================================================================
 NEXT2: 
	 CLR A
	 MOV A, #80H 
	 ACALL LCD_WRITE_CMD 
	 ACALL DELAY_LCD 
	 CLR A 
	 MOV DPTR, #CAUTION
LOOP_NEXT5:	 MOVC A,@A+DPTR
	 JZ HERE
	 ACALL LCD_WRITE_DATA 
	 ACALL DELAY_LCD
	 CLR A
	 INC DPTR 
	 SJMP LOOP_NEXT5

HERE:	 MOV A,#0C6H   ;SET TO TEXT TO SECOND ROW
	ACALL LCD_WRITE_CMD
	ACALL DELAY_LCD
	CLR A
	MOV DPTR, #NUM
 
	MOV R1, #1
	MOV R0, #0

PULUHAN:
	MOV A, 1
	JZ NEXT3 ; kalo misalkan R1 = 0 dan R0 = 0, maka lanjut
	MOV R0, #9
	DEC R1

SATUAN:
	MOV A, R1
	MOVC A, @A+DPTR
	ACALL LCD_WRITE_DATA
	ACALL DELAY_LCD
	ACALL DELAY_LCD

	MOV A, R0
	MOVC A, @A+DPTR
	ACALL LCD_WRITE_DATA
	ACALL DELAY_LCD
	ACALL DELAY_LCD

	ACALL DELAY

	MOV A,#0C6H   ; balikin ke tengah
	ACALL LCD_WRITE_CMD
	ACALL DELAY_LCD

	MOV A, 0 ; CHANGE THE DOZEN
	JZ PULUHAN

	DEC R0 ; CEK R0
	SJMP SATUAN
;====================================================================
;		TURNING ON MOTOR 
;====================================================================
NEXT3:	 CLR MOTOR 
	 CLR A
	 MOV DPTR,#CLEAR 
	 MOVC A,@A+DPTR
	 ACALL LCD_WRITE_CMD 
	 ACALL DELAY_LCD
	 
	 CLR A
	 MOV A,#82H
	 ACALL LCD_WRITE_CMD
	 ACALL DELAY_LCD
	 CLR A 
	 MOV DPTR,#OPEN 
LIF:	 MOVC A,@A+DPTR 
	 JZ LOL 
	 ACALL LCD_WRITE_DATA
	 ACALL DELAY_LCD
	 CLR A 
	 INC DPTR 
	 ACALL DELAY_LCD
	 SJMP LIF
;====================================================================
;	DISPLAY MESSAGE IF DATA ALREADY SENT TO GSM MODULE 
;====================================================================	 
LOL:  ACALL DELAY
	 MOV TMOD,#0010001B 
	 MOV SCON, #50H
	 SETB TR1
	 MOV TH1,#255D
	 

	 
	 MOV A,#"A"
	 ACALL SEND 
	 MOV A,#"T"
	 ACALL SEND 
	 MOV A,#0DH
	 ACALL SEND 
	 ACALL DELAY_LCD
	 
	 CLR A 
	 MOV DPTR,#CLEAR 
SOL: MOVC A,@A+DPTR
	 ACALL LCD_WRITE_CMD
	 ACALL DELAY_LCD
	 JZ SEL
	 INC DPTR
	 SJMP SOL
	 
	 
	 
SEL:  CLR A
	 MOV A,#80H 
	 ACALL LCD_WRITE_CMD
	 ACALL DELAY_LCD
	 MOV A,#"S"
	 ACALL LCD_WRITE_DATA
	  MOV A,#"E"
	 ACALL LCD_WRITE_DATA
	  MOV A,#"N"
	 ACALL LCD_WRITE_DATA
	  MOV A,#"T"
	 ACALL LCD_WRITE_DATA
	
	
LAL: ACALL DELAY
	 MOV DPTR, #OFF
	 MOVC A,@A+DPTR
	 JZ LIL
	 ACALL LCD_WRITE_CMD 
	 ACALL DELAY_LCD 
	 ACALL DELAY
	 SJMP LOL
LIL: 	 LJMP FINAL		 

	 
;====================================================================
;		SENDING TO GSM MODULE 
;====================================================================
SEND:	CLR TI
		MOV SBUF,A
WAIT:      JNB TI,WAIT
                RET
;====================================================================
;		COMMAND FOR INITIALIZING LCD
;====================================================================

LCD_WRITE_CMD:

	MOV LCD_DATA_PORT,A
	CLR RS
	CLR RW
	SETB EN
	ACALL DELAY_LCD
	CLR EN
	RET
;====================================================================
;		COMMAND FOR WRITING DATA INTO LCD
;====================================================================
LCD_WRITE_DATA:

	MOV LCD_DATA_PORT,A
	SETB RS
	CLR RW
	SETB EN
	ACALL DELAY_LCD
	CLR EN
	RET
;====================================================================
;		DELAY PROGRAM
;====================================================================
DELAY:
	MOV  R5, #20H
	MOV	TMOD, #01h
LOOP:	MOV	TH0, #3CH ; 50000 counts on timer
	MOV	TL0, #0B1H
	SETB	TR0
HERE5:	JNB	TF0, HERE5
	CLR	TR0
	CLR	TF0
	DJNZ R5, LOOP
	RET 
;====================================================================
;		DELAY LCD (40 micro seconds)
;====================================================================
DELAY_LCD:
	MOV R7,#255
	DJNZ R7, $
	MOV R6,#255
	DJNZ R6, $
	MOV R7,#255
	DJNZ R7, $
	MOV R6,#255
	DJNZ R6, $
	MOV R7,#255
	DJNZ R7, $
	MOV R6,#255
	DJNZ R6, $
	RET
;====================================================================
    ORG 300H 
   OPEN:                   DB 'GATE IS OPEN',0H
    CMD: 			DB  38H,0EH,06H,81H,0H
    NUM:		        DB  '0123456789'
    CAUTION:            DB  'GATE WILL OPEN   ',0H
    LVL4:	                DB  'WATER IN LEVEL 4',0H 
    LVL3:	                DB  'WATER IN LEVEL 3',0H 
    LVL2:	        	DB  'WATER IN LEVEL 2',0H 
    LVL1:   	        DB  'WATER IN LEVEL 1',0H 
    CLEAR:                DB 01H,0H
    OFF:                     DB 08H,0H
    SENT:                   DB 'SENT',0H
    FINAL: SJMP FINAL
    END
